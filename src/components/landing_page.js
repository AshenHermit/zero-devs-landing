import React, { useContext, useEffect, useRef } from 'react';
import logo from '../logo.png';

import * as ReactScroll from 'react-scroll';

import { AnchorLink, FullscreenBlock, HugeBlock, SpaceFill } from './content_blocks';
import { AnimatedHTMLPrinter, BgBlurredElement, RandomShapes } from './graphics_elements';

import { ReactComponent as SVGBrainInJar } from "../graphics/brain_in_jar.svg";
import { ReactComponent as SVGBlade } from "../graphics/blade.svg";
import { ReactComponent as SVGBotanicula } from "../graphics/botanicula.svg";
import { ReactComponent as SVGDemonFace } from "../graphics/demon_face.svg";
import { isMobile } from 'react-device-detect';
import { ClientContext } from '../client';

export const defaultSectionObj = {
  titleText: "–í —á–µ—Ä–µ–ø–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ",
  id: "in-brain",
  color: "red",
  titleContents: <>–í —á–µ—Ä–µ–ø–Ω–æ–π <br/><strong>–ö–û–†–û–ë–ö–ï</strong></>, 
  grid: [],
}
export const SectionContext = React.createContext(defaultSectionObj);

export const SectionTitle = (props) => {
  const section = useContext(SectionContext)
  const client = useContext(ClientContext)
  
  return (
    <ReactScroll.Link to={section.id} smooth={true}>
      <BgBlurredElement blurScale={1.7}>
        <h1 className={section.color+' gradient-text'}>{section.titleContents}</h1>
      </BgBlurredElement>
    </ReactScroll.Link>
  )
}

export const SectionText = (props) => {
  let section = useContext(SectionContext)
  let elRef = useRef()
  useEffect(()=>{
    let el = elRef.current
    Array.from(el.getElementsByTagName("b")).forEach(b=>{
      b.classList.add(section.color, "gradient-text")
    })
  })
  return (
    <div ref={elRef} className='text'>
      <div className='marked-text'>
        {props.children}
      </div>
    </div>
  )
}

export const SectionIdeasRow = ({columns=[]}) => {
  let section = useContext(SectionContext)
  
  if(!columns) return
  
  return (
    <div className='ideas-row'>
      {columns.map(el=>{
        return (
          <AnimatedHTMLPrinter step={4} fps={60}>
            <div className='col'>
              {el}
            </div>
          </AnimatedHTMLPrinter>
        )
      })}
    </div>
  )
}

export const SectionRenderer = ({section=defaultSectionObj})=>{

  return (
    <SectionContext.Provider value={section}>
      <HugeBlock
        blockName={section.id}
        title={
          <ReactScroll.Link to={section.id} smooth={true}>
            <h1 className={section.color+' gradient-text'}>{section.titleContents}</h1>
          </ReactScroll.Link>
        }
        color={section.color}
        align={section.align}
        bg={section.bg}
        alreadyAnimated={section.alreadyAnimated}
        viewOffset={0}
        grid={section.grid}
      >
      </HugeBlock>
    </SectionContext.Provider>
  )
}

export const Landing = () => {
  let sections = [
    {
      titleText: "–í —á–µ—Ä–µ–ø–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ", 
      id: "in-brain",
      color: "red",
      align: 'right',
      titleContents: <>–í —á–µ—Ä–µ–ø–Ω–æ–π <br/><strong>–ö–û–†–û–ë–ö–ï</strong></>, 
      alreadyAnimated: true,
      grid: [
        {
          left: <SectionText>
                  <h3><b>–ò–≥—Ä–∞</b> –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ - <b>—ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∂–∏–≤–∞—è –¥—É—à–∞ –∑–∞–ø–µ—á–∞—Ç–∞–Ω–Ω–∞—è –≤ —Å–≤–æ–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –æ–±–æ–ª–æ—á–∫–µ.</b></h3>
                  –£ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–µ—â–∞–º –∏ –∫ —Å–µ–±–µ, —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –û–Ω–∞ –ø–æ–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä–∞–ª–∏–∑—É–µ—Ç –≤–∞—Å –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ –º—ã—Å–ª–∏.
                </SectionText>
          ,
          right: <SectionTitle/>,
          template: "2fr 1fr auto",
          reverse: isMobile
        },
        {
          left: <SectionIdeasRow columns={[
            <>
              <SectionText>
                <b>–û–Ω–∞ –º–æ–∂–µ—Ç –∫–∞–∫ –∑–∞—Ä—è–¥–∏—Ç—å –≤–∞—Å –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–æ–º, —Ç–∞–∫ –∏ –∑–∞–±—Ä–∞—Ç—å –≤ —É—Ä–∞–≥–∞–Ω –∏–∑ –ø—Ä–æ–±–ª–µ–º –∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç–∞–≤—è—Ç –º—ã—Å–ª–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ.</b><br/>
                –û–Ω–∞ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç –≤–∞—Å –∏—Å–∫–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è —Ç–∞–º, –≥–¥–µ –∏—Ö –Ω–µ –∂–¥–µ—à—å. –ö–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω, –≤—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–≤–æ–±–æ–¥—É –ø–æ–ª–µ—Ç–∞ –º—ã—Å–ª–∏ –∏ –æ–∑–∞—Ä–µ–Ω–∏—è.
              </SectionText>
              <SVGBrainInJar/>
            </>
            ,
            <>
              <SVGBlade/>
              <SectionText>
                <b>–û–Ω–∞ –¥–∞–∂–µ –º–æ–∂–µ—Ç –±–æ–ª–µ—Ç—å –∏ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞—Ç—å.</b><br/>
                –ú–æ–∂–µ—Ç –æ—Ç—Ç–æ—Ä–≥–∞—Ç—å –≤–∞—Å.<br/>
                –ú–æ–∂–µ—Ç –∑–∞—Å—Ç–∞–≤–∏—Ç—å –≤–∞—Å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Ç–∞–∫ - –±—É–¥—Ç–æ –≤ –º–∏—Ä–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ –∫—Ä–æ–º–µ –≤–∞—Å, –±—É–¥—Ç–æ –≤–∞—Å –ø–æ–¥–º–µ–Ω–∏–ª–∏.<br/>
                <b>–ë—É–¥—Ç–æ –≤—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –≤–∞—Å –∏ –≤–æ–≤—Å–µ –Ω–∏–∫–æ–≥–¥–∞ –∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ.</b>
              </SectionText>
            </>,
            <>
              <SectionText>
                <b>–û–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –≤–∞—Å.</b> –ú–æ–∂–µ—Ç –∑–∞—Å—Ç–∞–≤–∏—Ç—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∞–∫ - –±—É–¥—Ç–æ –≤—ã –Ω–∞—à–ª–∏ –¥–∞–≤–Ω–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—É—é —á–∞—Å—Ç—å —Å–µ–±—è, –±—É–¥—Ç–æ –≤—ã –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ —Å–ª–∏–≤–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∏—Ä–æ–¥–æ–π.<br/>
                –ë—É–¥—Ç–æ —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –ø–æ–¥ –Ω–æ–≥–∞–º–∏ –ø–æ—á–≤—É, —É—Å–ª—ã—à–∞–ª–∏ –æ—Ç–≤–µ—Ç —Å –Ω–µ–±–∞, <b>–±—É–¥—Ç–æ —É–≤–∏–¥–µ–ª–∏ —Ç–µ–ø–ª—ã–π —Å–æ–Ω</b>, –ø—Ä–æ–∂–∏–ª–∏ –≥–æ–¥ –ª–µ—Ç–∞, –≥–æ–¥ –∑–∏–º—ã. –∑–∞–Ω–æ–≥–æ <b>–≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –¥–µ—Ç—Å—Ç–≤–æ</b>, –∏ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–∞–≤–µ—á–Ω–æ.
              </SectionText>
              <SVGBotanicula/>
            </>
          ]}/>
        }
      ]
    },

    {
      titleText: "–í –Ω–µ—Ä–≤–∞—Ö", 
      id: "in-nerves",
      color: "blue",
      align: 'left',
      bg: 'left',
      titleContents: <>–í –Ω–µ—Ä–≤–∞—Ö <br/><strong>=-----=</strong></>, 
      grid: [
        {"left": <SectionTitle/>}
      ]
    },

    {
      titleText: "–í —Ü–∏—Ñ—Ä–µ",
      id: "in-program",
      color: "green",
      align: 'right',
      titleContents: <>[–í —Ü–∏—Ñ—Ä–µ]<br/><strong>110100</strong></>, 
      grid: [
        {"right": <SectionTitle/>}
      ]
    },
  ]

  const ModelsShowoffLazy = React.lazy(() => import("./3d_showoff/showoff"));
  const client = useContext(ClientContext)
  client.sectionsData = sections

  useEffect(()=>{})

  return (
    <div className="home">
      <RandomShapes numShapes = {20} animated={!isMobile}/>
      {!isMobile ? 
        <React.Suspense fallback={null}>
          <ModelsShowoffLazy/>
        </React.Suspense>
       : ''}

      <FullscreenBlock
        outerSpace={<>
          <RandomShapes numShapes = {isMobile? 10: 20}/>
        </>}
        grid={[
          {
            left: <>
                <AnimatedHTMLPrinter fps={60}>
                <BgBlurredElement blurScale={1.7}>
                  <h1 className='red gradient-text'>–ì–æ—Å–ø–æ–¥–∏ –∫—Ç–æ-–Ω–∏–±—É–¥—å<br/><strong>–ü–û–ú–û–ì–ò–¢–ï –ú–ù–ï</strong></h1>
                </BgBlurredElement>
                <h2>
                  <span className='red bg-gradient-text'>–Ø –Ω–∞—Å–∏–ª—å–Ω–æ –∑–∞–ø–µ—Ä—Ç...</span><br/>
                </h2>
                <ol>
                  {sections.map((section, i)=>{
                    return <li key={section.id + i}>
                      <ReactScroll.Link to={section.id} smooth={true} hashSpy={true}>
                        {section.titleText}
                      </ReactScroll.Link>
                    </li>
                  })}
                </ol>

                <h2>
                  <span className='red bg-gradient-text'>...–≤ —Å–∞–º–æ–π –ø–∏–∑–¥–∞—Ç–æ–π –≥–µ–π–º–¥–µ–≤ –∫–æ–º–∞–Ω–¥–µ üí™</span><br/>
                </h2>
                {/* <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>
                <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span> */}
              </AnimatedHTMLPrinter>
            </>
            ,
            right: !isMobile ? <SVGDemonFace className='big-logo shadow-filter'/> : ''
          }
        ]}
      >
      </FullscreenBlock>

      {sections.map(section=>{
        return <SectionRenderer key={section.id} section={section}></SectionRenderer>
      })}

    </div>
  );
};